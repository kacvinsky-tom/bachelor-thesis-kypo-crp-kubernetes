gitInternalSsh:
  name: git-internal-ssh
  replicasCount: 1
  image:
    url: registry.gitlab.ics.muni.cz:443/muni-kypo-crp/kypo-crp-artifact-repository/kypo-ssh-git
    tag: master

  ports:
    - port: 22
      protocol: TCP

  mounts:
    - name: git-ssh-key
      extension: .pub
      mountPath: /assets/keys/
      isOneFile: true
      type: 
        secret:
          secretName: internal-git-ssh-keys

    - name: repos-pvc
      extension:
      mountPath: /repos
      isOneFile: false
      type: 
        persistentVolumeClaim:
          claimName: repos-pvc

gitInternalRest:
  name: git-internal-rest
  replicasCount: 1
  image:
    url: registry.gitlab.ics.muni.cz:443/muni-kypo-crp/kypo-crp-artifact-repository/kypo-restfulgit
    tag: master

  ports:
    - port: 5000
      protocol: TCP

  mounts:
    - name: repos-pvc
      extension:
      mountPath: /repos
      isOneFile: false
      type: 
        persistentVolumeClaim:
          claimName: repos-pvc

# Service variable example
# ------------------------
# exampleService defines name of the service written in camelCase (do not use hyphens in this name)
exampleService:
# name, which will created pod contain, (recommended to split name by hyphens) 
  name: example-service
# replicasCount defines number of replicas created for this service
  replicasCount:
# image defines Docker image used for this service
  image:
#   url of Docker image
    url: busybox
#   tag of Docker image
    tag: latest
# list of ports of service, accessible only by other pods
  ports:
  - port: 8000
    protocol: TCP
# contextPath is path in url, which will point ingress to this service
  contextPath: /path/to/service
# list of mounts, which will be mounted into the created pod
  mounts:
#     name of mount, if the mount is file, it'll have the same name in pod
#     name of mount, if the mount is volume, it has just representative function
    - name: file
#     extension is used only if the mount is SINGLE file, it's the extension of mounted file, OPTIONAL
      extension: .yml
#     mountPath is path in the created pod, where the file/folder'll be mounted
      mountPath: /app/etc/
#     isOneFile is used to recognize, if the mount is the SINGLE file 
      isOneFile: true
#     type is unique variable, defining type of used mount. It must be one of these https://kubernetes.io/docs/concepts/storage/volumes/
#     and must have the exact structure of chosen volume
      type:
        configMap:
          name: postgres-configmap