{{- with .Values.syslogNg }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .name }}-configmap
data:
  syslog-events.conf: |
    # EVENTS Log source
    source s_event {
        network(
        ip({{ $.Values.sNgSourceSandboxIp }})
        port({{ $.Values.sNgSourceEventsPort }})
        transport({{ $.Values.sNgSourceTrainingProtocol }})
        );
    };

    # Add syslog fromhost and timestamp to the json
    template kypo_portal_events_template {
        template("{\"syslog\":$(format-json --pair fromhost-ip=$FULLHOST_FROM --pair timegenerated=$ISODATE),\"event\":$(format-json --pair hostname=$HOST --pair programname=$PROGRAM --pair procid=$PID --pair facility=$FACILITY --pair severity=$SEVERITY --pair timereported=${S_DATE} --pair message=$MESSAGE\n)}\n");
    };

    #FILTERS log filter 
    filter f_event { source("s_event"); };

    # EVENTS log destination
    destination d_event_logstash {
        network(
            "{{ $.Values.sNgDestination }}"
            port({{ $.Values.sNgEventsDestinationPort }})
            transport({{ $.Values.sNgDestinationProtocol }})
            ip-protocol(4)
            template(kypo_portal_events_template)
        );
    };

    # EVENTS Log pairing
    log {source(s_event); filter(f_event); destination(d_event_logstash);};


  syslog-sandbox.conf: |
    options {
    keep-hostname(yes);
    };

    # Sandbox Logs Source
    source s_sandbox {
        network(
        ip({{ $.Values.sNgSourceSandboxIp }})
        port({{ $.Values.sNgSourceSandboxPort }})
        transport({{ $.Values.sNgSourceSandboxProtocol }})
  {{- if eq $.Values.sNgSourceSandboxProtocol "tls"}}
        tls(
                    key-file("/etc/syslog-ng/cert.d/syslog-key.pem")
                    cert-file("/etc/syslog-ng/cert.d/syslog-cert.pem")
                    ca-dir("/etc/ssl/certs") 
    {{- if $.Values.sNgVerifyClients }}
                    peer-verify(no)
    {{- end }}
        )
  {{- end }}
        flags(syslog-protocol)
        #Maximum clients, that can be served by syslog-ng
        max-connections({{ $.Values.sNgSourceSandboxMaxConnections }})
        log_iw_size({{ $.Values.sNgSourceSandboxLogInitialWindowsSize }})
        );
    };

    # BASH and MSF4 commands common settings
    template kypo_man_console_command_syslog_template {
        template("{\"event\":$(format-json --pair hostname=$HOST --pair ip=${.SDATA.kypo.fromhost_ip} --pair fromhost_ip=$SOURCEIP --pair programname=$PROGRAM --pair procid=$PID --pair unixtime=${UNIXTIME} --pair facility=$FACILITY --pair severity=$SEVERITY --pair timereported=${S_DATE} --pair pool_id=${.SDATA.kypo.pool_id} --pair sandbox_id=${.SDATA.kypo.sandbox_id} --pair message=$MESSAGE\n)}\n");
    };

    # BASH commands
    filter f_bash_command { program("bash.command") };

    destination d_sandbox_bash_commands_logstash {
        network(
            "{{ $.Values.sNgDestination }}"
            port({{ $.Values.sNgBashDestinationPort }})
            transport({{ $.Values.sNgDestinationProtocol }})
            ip-protocol(4)
            template(kypo_man_console_command_syslog_template)
        );
    };

    log {source(s_sandbox); filter(f_bash_command); destination(d_sandbox_bash_commands_logstash);};

    # MSF4 commands
    filter f_metasploit_command { program("msf.command") };

    destination d_sandbox_metasploit_commands_logstash {
        network(
            "{{ $.Values.sNgDestination }}"
            port({{ $.Values.sNgMsfDestinationPort }})
            transport({{ $.Values.sNgDestinationProtocol }})
            ip-protocol(4)
            template(kypo_man_console_command_syslog_template)
        );
    };

    log {source(s_sandbox); filter(f_metasploit_command); destination(d_sandbox_metasploit_commands_logstash);};
  
  syslog-ng.conf: |
    @version: 3.28
    @include "scl.conf"
    @include "/etc/syslog-ng/conf.d/"

{{- end -}}
